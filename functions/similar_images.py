# -*- coding: utf-8 -*-
"""Week_7_Similar_Images_Function.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bB2aIIBHKdtvFEJRZykkoZwDPfmd01Vl

# Week 7: Find Similar Images

Runtime: changed runtime type to GPU

Files setting: Mount to Google Drive
"""

# if using google colab, mount your drive
# from google.colab import drive
# drive.mount('/content/drive')

import os
import random
import matplotlib.pyplot as plt

DATA_DIR = '/content/drive/My Drive/Junior/CS121/artData/small_25_100_data'

def get_similar(classifier, num_images):
    ''' Displays random images of a certain style or artist
    This function assumes that images are organized based on the classifier,
                which may change depending on front end integration
    classifer: the predicted category (style or artist)
                (does not have to be a string! Can come straight from predictor)
    num_images: The number of images to get
    Note: Right now, it displays using pyplot.
    The output can be easily changed to be whatever format we will need for front end'''
    class_folder = DATA_DIR + "/" + str(classifier)

    sim_images = []

    for root, directory, files in os.walk(class_folder):
        while len(sim_images) < num_images:
            img_name = random.choice(files)
            if img_name not in sim_images:
                sim_images.append(img_name)
                img = plt.imread(class_folder + "/" + random.choice(files))
                plt.imshow(img)
                plt.show()

get_similar("Ukiyo-e", 3)
